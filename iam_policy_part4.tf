resource "aws_iam_policy" "firefly_readonly_policy_part4" {
  name        = "FireflyReadonlyPolicy_part4"
  path        = "/"
  description = "Read only permission for the cloud configuration Part4"

  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Action" : [
          "iam:GetAccountPasswordPolicy",
          "iam:GetGroup",
          "iam:GetGroupPolicy",
          "iam:GetInstanceProfile",
          "iam:GetLoginProfile",
          "iam:GetOpenIDConnectProvider",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:GetSAMLProvider",
          "iam:GetSSHPublicKey",
          "iam:GetServerCertificate",
          "iam:GetUser",
          "iam:GetUserPolicy",
          "iam:ListAccessKeys",
          "iam:ListAccountAliases",
          "iam:ListEntitiesForPolicy",
          "iam:ListGroupPolicies",
          "iam:ListGroups",
          "iam:ListGroupsForUser",
          "iam:ListInstanceProfileTags",
          "iam:ListInstanceProfiles",
          "iam:ListInstanceProfilesForRole",
          "iam:ListOpenIDConnectProviderTags",
          "iam:ListOpenIDConnectProviders",
          "iam:ListPolicies",
          "iam:ListPolicyTags",
          "iam:ListPolicyVersions",
          "iam:ListRolePolicies",
          "iam:ListRoleTags",
          "iam:ListRoles",
          "iam:ListSAMLProviderTags",
          "iam:ListSAMLProviders",
          "iam:ListSSHPublicKeys",
          "iam:ListServerCertificateTags",
          "iam:ListServerCertificates",
          "iam:ListServiceSpecificCredentials",
          "iam:ListSigningCertificates",
          "iam:ListUserPolicies",
          "iam:ListUserTags",
          "iam:ListUsers",
          "iam:ListVirtualMFADevices",
          "identitystore:DescribeGroup",
          "identitystore:DescribeUser",
          "identitystore:ListGroups",
          "identitystore:ListUsers",
          "imagebuilder:GetComponent",
          "imagebuilder:GetContainerRecipe",
          "imagebuilder:GetDistributionConfiguration",
          "imagebuilder:GetImage",
          "imagebuilder:GetImagePipeline",
          "imagebuilder:GetImageRecipe",
          "imagebuilder:GetInfrastructureConfiguration",
          "imagebuilder:List*",
          "inspector2:DescribeOrganizationConfiguration",
          "inspector2:ListAccountPermissions",
          "inspector2:ListDelegatedAdminAccounts",
          "inspector2:ListFilters",
          "inspector2:ListMembers",
          "inspector2:ListTagsForResource",
          "inspector:DescribeAssessmentTargets",
          "inspector:DescribeAssessmentTemplates",
          "inspector:DescribeCrossAccountAccessRole",
          "inspector:DescribeExclusions",
          "inspector:DescribeResourceGroups",
          "inspector:DescribeRulesPackages",
          "inspector:ListAssessmentTargets",
          "inspector:ListAssessmentTemplates",
          "inspector:ListEventSubscriptions",
          "inspector:ListExclusions",
          "inspector:ListRulesPackages",
          "inspector:ListTagsForResource",
          "kafka:Describe*",
          "kafka:GetBootstrapBrokers",
          "kafka:List*",
          "kafkaconnect:Describe*",
          "kafkaconnect:List*",
          "kinesis:DescribeLimits",
          "kinesis:DescribeStream",
          "kinesis:DescribeStreamConsumer",
          "kinesis:ListShards",
          "kinesis:ListStreamConsumers",
          "kinesis:ListStreams",
          "kinesis:ListTagsForStream",
          "kinesisanalytics:DescribeApplication",
          "kinesisanalytics:DescribeApplicationVersion",
          "kinesisanalytics:ListApplicationVersions",
          "kinesisanalytics:ListApplications",
          "kinesisanalytics:ListTagsForResource",
          "kinesisvideo:DescribeSignalingChannel",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:ListSignalingChannels",
          "kinesisvideo:ListStreams",
          "kinesisvideo:ListTagsForResource",
          "kinesisvideo:ListTagsForStream",
          "kms:DescribeCustomKeyStores",
          "kms:DescribeKey",
          "kms:GetKeyPolicy",
          "kms:GetPublicKey",
          "kms:ListAliases",
          "kms:ListKeyPolicies",
          "kms:ListKeys",
          "kms:ListResourceTags",
          "lakeformation:DescribeResource",
          "lakeformation:GetDataLakeSettings",
          "lakeformation:ListDataCellsFilter",
          "lakeformation:ListLFTags",
          "lakeformation:ListPermissions",
          "lakeformation:ListResources",
          "lakeformation:ListTableStorageOptimizers",
          "lambda:GetAlias",
          "lambda:GetCodeSigningConfig",
          "lambda:GetEventSourceMapping",
          "lambda:GetFunction",
          "lambda:GetFunctionCodeSigningConfig",
          "lambda:GetFunctionEventInvokeConfig",
          "lambda:GetLayerVersion",
          "lambda:GetLayerVersionPolicy",
          "lambda:GetPolicy",
          "lambda:GetProvisionedConcurrencyConfig",
          "lambda:List*",
          "lex:DescribeBot",
          "lex:DescribeBotAlias",
          "lex:DescribeBotLocale",
          "lex:DescribeBotVersion",
          "lex:DescribeIntent",
          "lex:DescribeResourcePolicy",
          "lex:DescribeSlot",
          "lex:DescribeSlotType",
          "lex:GetBot",
          "lex:ListAggregatedUtterances",
          "lex:ListBotAliases",
          "lex:ListBotLocales",
          "lex:ListBotRecommendations",
          "lex:ListBotVersions",
          "lex:ListBots",
          "lex:ListBuiltInIntents",
          "lex:ListBuiltInSlotTypes",
          "lex:ListExports",
          "lex:ListImports",
          "lex:ListIntents",
          "lex:ListRecommendedIntents",
          "lex:ListSlotTypes",
          "lex:ListSlots",
          "lex:ListTagsForResource",
        ],
        "Effect" : "Allow",
        "Resource" : "*"
      }
    ]
  })
}